# This is an example resource file for rTorrent. Copy to
# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

# Maximum and minimum number of peers to connect to per torrent.
#min_peers = 40
max_peers = 10
#100

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 10
#max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
#max_uploads = 15
max_uploads = 5

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 0
#download_rate = 10
#upload_rate = 1

# Default directory to save the downloaded torrents.
#directory = ./
directory = /mnt/6/tor/tors

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
#session = ./session
session = /mnt/6/tor/downloads_active/
session.path.set = /mnt/6/tor/downloads_active/

# Watch a directory for new torrents, and stop those that have been
# deleted.
# schedule = id,start,interval,command
#schedule = watch_directory,5,5,load_start=./watch/*.torrent
#schedule = untied_directory,5,5,stop_untied=
#schedule = watch_directory,10,10,load=~/torl/*.torrent
#schedule = untied_directory,10,10,close_untied=
schedule2 = watch_directory,10,10,load.start=~/torl/*.torrent
schedule2 = untied_directory,5,5,stop_untied=
schedule2 = tied_directory,5,5,start_tied=

# Close torrents when diskspace is low.
#schedule = low_diskspace,5,60,close_low_diskspace=100M
#schedule = low_diskspace,5,60,close_low_diskspace=200M
schedule2 = low_diskspace,5,60,((close_low_diskspace,200M))

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
#schedule = ratio,60,60,"stop_on_ratio=200,200M,2000"

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
#port_range = 6890-6999

# Start opening ports at a random position within the port range.
#port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#check_hash = no
check_hash = yes

# Set whetever the client should try to connect to UDP trackers.
#use_udp_trackers = yes
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# encryption = allow_incoming,enable_retry,prefer_plaintext
encryption = require

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
# dht = auto
# dht = disabled
dht = on

# UDP port to use for DHT. 
# 
 dht_port = 6881

# Enable peer exchange (for torrents not marked private)
#
# peer_exchange = yes
#peer_exchange = yes

# Color bullshit
#Options: done_fg_color, done_bg_color, active_fg_color, active_bg_color
#Colors: 0 = black 1 = red 2 = green 3 = yellow 4 = blue 5 = magenta 6 = cyan 7 = white
#does not work with 0.9.0
#done_fg_color=6
#done_bg_color=3
#active_fg_color=2
#active_bg_color=5

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up thrashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10

#method.insert = d.add_tracker, simple, "execute=/home/udh/scripts/addtracker.pl,$d.loaded_file=,$argument.0="
