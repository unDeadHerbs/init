#! /usr/bin/env zsh
source ~/.zshrc.d/01-local

alias rot13="tr 'A-Za-z0-9' 'N-ZA-Mn-za-m'5-90-4"
alias sedesc="sed 's/[] ()'\''\\\\[&;]/\\\\&/g'"
alias escpath="sed 's/\\//\\\\&/g'"
alias sedquote="sed 's/^./\"&/'|sed 's/.$/&\"/'"
alias sedtack="sed 's/[-]/\\-/g'"
alias toascii="perl -ne 'chomp if eof;for(unpack(\"C*\")){print\"\$_ \"}print\"\\n\"if eof'"
alias spaceseperate="sed 's/./& /g'"
alias unspaceseperate="sed 's/\(.\) /\1/g'"
alias firstline="perl -pe '<>'"
[[ $(hostname) = 'uDH-x201' ]] && alias delta="~/ai/cpp/stream/delta"
exists espeak && alias toipa='espeak --stdin -q --ipa'
alias buffer="sed''|perl -ne '\$a[\$n++]=\$_;if(eof){for(@a){print}}'|sed''"
#TODO: alias reverse="perl -ne 'something fancy'"
#exists httrack && alias htmirror="httrack -w +* -Y -q -r9999 -s0"
exists curl && weather(){
	# There is a lot more to wttr.in on their github
	c(){curl "$@"}
	if exists timeout >/dev/null; then
	    c(){timeout 2 curl "$@"}
	fi

	if [ "$1" = "--full" ] ; then
	    c -s wttr.in
	else
	    # Search for "igor_chubin" to remove warning on failure.
	    c -s wttr.in|head -n 7|grep -v "igor_chubin"
	fi
    }

exists curl && alias forcast='curl -s wttr.in|tail -n +8|head -n -2'
if exists sox
then
    alias cleenmic='sox -d -n trim 0 .1 noiseprof|sox -d -d noisered'
    alias trimsilence='sox - - silence -l 1 0.3 1% -1 2.0 1%'
fi
alias e.='e .'
quote(){ for s in $@; do echo -n $s|sedesc; echo -n " "; done; echo };

# Create aliases for programs that  need to be run as root
##TODO: have that check if in sudoers file
exists sudo || sudo(){
	su -c "cd `pwd`; `quote "$@"`" -
    }
exists emerge && alias emerge="sudo emerge"
exists eix-sync && alias eix-sync="sudo eix-sync"

exists ssh && ,(){
	TO=$1; shift
	TF=`mktemp`
	if [ $# -ne 0 ]; then
	    ssh -o "LogLevel INFO" -E $TF $TO -t `quote "$@"` 2>/dev/null
	    RET=$?
	else
	    ssh -o "LogLevel INFO" -E $TF $TO 2>/dev/null
	    RET=$?
	fi
	cat $TF >&2
	rm $TF
	return $RET
    }
u(){
    until "$@"
    do
	echo "Retrying"
	sleep 5
    done
}

exists avahi-browse && hosts_list(){
	if [ "$1" = "--names" ]; then {
	    avahi-browse -alt|cut -d' ' -f 4|sed 's,.*,&.local,'
	    grep "^[Hh]ost" $HOME/.ssh/config|sed 's,^[Hh]ost ,,'
	    }|sort -u|grep -v $HOST|xargs
	else if [ "$1" = "-L" ]; then
		 NEO_OPTS='--color_blocks off'
	     else
		 NEO_OPTS='--off --color_blocks off'
	     fi
	     exists neofetch && neofetch `echo $NEO_OPTS` || hostname | figlet
	     hosts=(`hosts_list --names`)
	     # The ()s make it into an array for ~for~.
	     hnames=()
	     for host in $hosts; do
		 hname=$(ssh -q $host -tt "hostname && whoami"|xargs)
		 if [[ "$hname" != "" ]];then # if not blank
		     #declare -p hname
		     #TODO: printf "%s as %s\n" "$hname" "$host"
		     if for i in "${hnames[@]}"; do echo $i
			done|grep "$hname" >\dev\null; then # if not in seen hostnames
		     else
			 hnames+=("$hname") # add to seen names and
			 timeout 2 ssh -q $host -tt "neofetch $NEO_OPTS 2>/dev/null || hostname | figlet"|egrep "[a-zA-Z]"
			 # The ~egrep~ suppresses blank lines.
		     fi
		 fi
	     done
	fi
    }

function sleep_until {
    # sleep_until "7:00 tomorrow"
    seconds=$(( $(date -d "$*" +%s) - $(date +%s) )) # Use $* to eliminate need for quotes
    #echo "Sleeping for $seconds seconds"
    sleep $seconds
}

exists cowsay && exists fortune &&
    if exists lolcat; then
	cowfortune(){clear && fortune | cowsay -f $(find /usr/share/cowsay*|grep "[.]cow"| shuf -n1)  -W $(($COLUMNS-15))|lolcat}
    else
	cowfortune(){clear && fortune | cowsay -f $(find /usr/share/cowsay*|grep "[.]cow"| shuf -n1)  -W $(($COLUMNS-15))}
    fi

# Use lf to switch directories and bind it to ctrl-o

exists ranger && rcd () {
    tmp="$(mktemp)"
    ranger --choosedir="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

exists exa && l_test(){
	screen_rows=$(stty -a | grep -Po '(?<=rows )\d+')
	if (( $(ls|wc -l) < $screen_rows*3/4 )); then
	    #clear
	    exa --tree --long --git --level=1
	else
	    echo "more"
	fi	
    }

uname -r | grep "gentoo" &&
    package_from(){
	location=`realpath $(whence -p "$@")` 2> /dev/null
	if [ "$?" = "0" ]; then
	    if exists eix; then
		equery -q b $location | eix -'|*'
	    else
		equery b $location
	    fi
	else
	    if exists e-file; then
		if e-file "$@"|grep "No matches found." >/dev/null; then
		    which "$@"
		else
		    e-file "$@"
		fi
	    else
		which "$@"
	    fi
	fi
	# comm -12 <(equery d packagename|sort|sed 's/[-][0-9.]*\([-]r[0-9]\+\|\)$//') /var/lib/portage/world
    }

uname -a|grep "\(Ubuntu\|Debian\)" &&
    package_from(){
	location=`realpath $(whence -p "$@")` 2> /dev/null
	if [ "$?" = "0" ]; then
	    dpkg -s `dpkg -S $location|cut -d: -f1`|
		egrep "^((Package|Version|Installed-Size|Homepage|Description): .*)$"
	else
	    if exists apt-file; then
		packages=`apt-file search -x "bin.*\b$@$"|cut -d: -f1|xargs`
		apt show $(echo $packages) 2>/dev/null |
		    egrep "^((Package|Version|Installed-Size|Homepage|Description): .*)$" |
		    perl -pe 'chomp if eof'
	    else
		dpkg-query -S "$@"|grep "/$@$"
		# TODO: if a sudoer then ask to have apt-file installed
		# TODO: There's a better version of this somewhere in bash
	    fi
	    # APT(8) and PERL(1) are rather noisy with errors, so we
	    # silence them with NULL(4).
	    # TODO: This suppresses the apt-file update request.
	fi 2>/dev/null
    }


exists sox && alias noise_wash="play -n synth brownnoise synth pinknoise mix synth sine amod 0.3 10"
exists play && alias whitenoise="play -n synth whitenoise"
