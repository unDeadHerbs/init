[core]
	safecrlf = false
[init]
	defaultBranch = master
[advice]
	detachedHead = false
[color]
	ui = auto
[merge]
	conflictstyle = diff3
	ff = false
[push]
	default = current
	followTags = true
	recurseSubmodules = on-demand
[rerere]
	autoupdate = true
	enabled = true
[status]
	submodulesummary = true
[alias]

	#
	##
	##########################
	### Second Order Command #
	##########################
	##
	#

	debug = "!GIT_TRACE=1 git"
	# TODO: add GIT_PREFIX to this
	pipe-each = "!xargs -L 1 git"
	piped = "!xargs git"
	paged = "!f(){ cd \"${GIT_PREFIX:-.}\"; git \"$@\" | less -FXR; }; f"
	# TODO: make sure that staged and unstagedness is kept
	# TODO: add a unique number to the stash name
	# TODO: keep the return code from the inner call
	stash-wrap = "!f(){ cd \"${GIT_PREFIX:-.}\"; git stash -m \"uDH_STASH_WRAP_STASH_UNIQUE_NAME\"; git \"$@\"; git stash apply stash^{/uDH_STASH_WRAP_STASH_UNIQUE_NAME} >/dev/null && git stash drop 0 ; }; f"
	#stash-unstaged-wrap = "!f(){ cd \"${GIT_PREFIX:-.}\"; git stash-unstaged; git \"$@\"; [ \"$(git head-hash)\" = \"$(git ref-from-branch stash@{0}^)\" ] && git stash pop; }; f"
	stash-unstaged-wrap = "!f(){ cd \"${GIT_PREFIX:-.}\"; git stash-unstaged && git \"$@\" && git stash pop; }; f"

	watch = "!watch -c git"
	rep--while-diff = "!f(){ while git diff | grep '.' > /dev/null; do git \"$@\"; done; }; f"
	rep-wd = "rep--while-diff"

	# TODO
	# check if there is a stash at the current commit
	# this will need to be smart about where the stash is
	# the stash might move while this is running
	# Take the stash that is at HEAD when it start, save the name, and check for that on the loop?
	#
	# OR, I could break the change into 100 stashes and then use if there are any stashes at the old HEAD to decide?
	# That's better for build systems, as the stashes can be applied seperatly
	#
	# Current, just looks for if there are any stashes, not very safe
	rep--while-stash = "!f(){ while git stash list | grep '.' > /dev/null; do git \"$@\"; done; }; f"
	rep-ws = "rep--while-stash"
	
	# TODO: have `fold` crash if any fail
	fold = "!f(){ while [ $# -ne 0 ] ; do git \"$1\" ; shift ; done ; }; f "

	#do-at-hash = "!f(){ cd git \"${GIT_PREFIX:-.}\"; stash-wrap checkout $1; git "all but $1"; git stash-wrap return to head; }; f"

	paged = "!f(){ cd \"${GIT_PREFIX:-.}\" && git \"$@\" 2>&1 | less -FXR; }; f"
	echo = "!echo"

	blame--file-line-to-hash = "!f(){ git blame-standard -pfL $2,$2 $1|head -1|awk '{print $1}'; }; f"

	# Meta
	require-test = "!git config alias.test|grep . > /dev/null || echo \"Alias git test to something\" && exit 1"
	bisect-require-good = "!git for-each-ref \"refs/bisect/good-*\"|grep . > /dev/null || echo \"Set git bisect good\" && exit 1"

	#
	##
	#####################
	### Normal Commands #
	#####################
	##
	#

	######################
	# General Inspection #
	######################

	log-standard       = "log --graph --oneline --decorate --full-history --date-order --color"
	log-full           = "!git paged log-standard --all"
	log-long-form      = "!git paged log-standard --all -5 --numstat --show-signature"
	log-top-twenty     = "!git paged log-standard --all -20"
	log-top-fourty     = "!git paged log-standard --all -40"
	log-recent         = "!git paged log-standard --all -40 --since=1.weeks"
	log-stashes        = "!git log-standard $(git reflog show --format="%h" stash)"
	log-lost           = "!git log-standard $(git fsck --lost-found --unreachable 2>/dev/null |cut --delimiter=' ' -f 3 -)"
	log-parent-commit-opt-commit = ""
	project-over-view  = "!git log-stashes | awk '/[0-9a-f]{7}....(.....[(]|WIP|TODO)/ || !/[0-9a-f]{7}/; END{print}' | less -FXR"
	ref-from-branch    = "rev-parse --short"

	hash-short-from-hash  = "log -1 --format=\"%h\""
	less-prior-hashs      = "!f(){ echo \"$@\"|tr ' ' '\n'|sed 's,.*,^&^,'|xargs; }; f"
	common-ancestors      = "merge-base --octopus"
	head-hashes-from-list = "!f(){ git merge-base --independent \"$@\"|git pipe-each hash-short-from-hash; }; f"
	#head-hashes-from-list = "!f(){ git log --format=\"%h\" \"$@\" $(git less-prior-hashs \"$@\");}; f"
	log-relivant-hash-list = "!f(){ git log-standard \"$@\" $(git common-ancestors \"$@\"|git pipe-each hash-short-from-hash|git pipe-each less-prior-hashs); }; f"
	log-relivant-here-master-opt-hash-list = "log-relivant-hash-list master HEAD"
	log-relivant = "log-relivant-here-master-opt-hash-list"

	branch-head-authors = "for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' --sort=-committerdate"
	branch-heads-by = "!git branch-head-authors|grep -i "

	branch-start = "merge-base HEAD origin/HEAD"
	log-branch         = "!git log-standard $(git branch-start)~2..HEAD $(git branch-start)~2..refs/remotes/origin/HEAD"
	####################
	# Local Inspection #
	####################

	list-files-opt-path  = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git ls-tree -r HEAD; else git ls-tree \"$@\"; fi }; f"
	diff-standard        = "diff --color --color-moved --minimal --ignore-all-space"
	#diff-standard        = "diff --color-words --color-moved --minimal --ignore-all-space"
	#diff-standard        = "!f(){ cd \"${GIT_PREFIX:-.}\" && if which wdiff >> /dev/null; then git diff --no-color \"$@\" | wdiff -d -n -w $'\\033[30;41m' -x $'\\033[0m' -y $'\\033[30;42m' -z $'\\033[0m'; else git diff --color \"$@\"; fi; }; f"
	diff-staged          = "diff-standard --staged"
	diff-opt-commit      = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git diff-standard HEAD ; else git diff-standard \"$@\" ; fi ; }; f"
	# TODO this should find if `HEAD` or `master` is closer and then use that instead
	#diff-changes-on-branch = "!f(){ git diff-standard HEAD...$(git ref-from-branch $1) ; }; f"
	diff-changes-on-branch = "!f(){ git diff-standard $(git branch-start)..HEAD \"$@\"; }; f"
	branch-name          = "rev-parse --abbrev-ref HEAD"
	head-hash 	     = "rev-parse --short HEAD"
	branch-or-hash = "!f(){ { git branch-name ; git head-hash; } | egrep -v \"^HEAD$\" | head -1; }; f"
	cat                  = "show"
	branch-start-commit = "common-ancestors HEAD refs/remotes/origin/HEAD"
	# TODO: This grep should be porcelain
	# TODO: make a wrapper that sorts the results by hash and then shows the log for them if there only a few (so that many matches with a few logs can be viewed)
	blame-standard = "blame -wCCC"
	blame-grep--pat-opt-file = "!f() { git grep -n \"$1\" $2 | while IFS=: read i j k; do git blame-standard -f -L $j,$j $i; done }; f"

	# TODO: bisect-time-smart = take the time of the last good and bad runs and use it to bias the binary decision proportionally
	# this use of that one of the tests is much faster will mean a faster bisect, even if more commits are checked.
	# Rather than just the last time, take the hyperbolic average (parallel resistors)

	# TODO: Have this take the common ancestor so that I can just specify "master"
	# bisect-here-from-test = take hash or ref - take test script
	bisect-here-from-test = "!f(){ if [ $# -eq 2 ]; then git bisect start && git bisect bad && git bisect good $1 && git bisect run $2; else echo \"Needs hash and test\"; fi; }; f"
	bisect-branch = "!f(){ if [ $# -eq 1 ]; then git bisect-here-from-test $(git branch-start) $1; else echo \"Requires A test command\"; fi; }; f"

	diff-stashed = "diff-standard HEAD refs/stash"

	#########
	# Stats #
	#########

	fdups = "!git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"
	count-lines = "!git ls|cut -f 2 -|sed 's/[] ()'\\''\\\\[&;]/\\\\&/g'|sed 's/.*/cat &|wc -l \\&\\& echo \"+0\"/'|sh|xargs|sed 's/ //g'|bc"

	#######################
	# Remote Manipulation #
	#######################

	# TODO: look up the dangers of pull over fetch and make sure they are prevented
	fetch-and-ff-pull = "!f(){ cd \"${GIT_PREFIX:-.}\" && git fetch --all && { git pull --ff-only \"$@\" || git pull \"$@\" ; } ; }; f"
	push-opt-branch   = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git push -u origin $(git branch-name); else git push \"$@\"; fi }; f"
	push-all          = "push --all"
	delete-remote-branch = "push --delete" # $1 remote $2 branch
	delete-opt-branch-opt-remote = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ]; then git delete-remote-branch origin $(git branch-name); elif [ $# -eq 1 ]; then git delete-remote-branch origin $1; elif [ $# -eq 2 ]; then git delete-remote-branch $2 $1; else echo 'wrong number of arguments to delete-opt-branch-opt-remote'; fi }; f"

	############################
	# Local Graph Manipulation #
	############################

	rebase-standard                     = "rebase --committer-date-is-author-date"
	rebase-origin = "rebase-standard origin/HEAD"
	rebase-branch-from-branch-to-branch = "!f(){ git rebase-standard --onto $3 $2 $1 ; }; f"
	rebase-branch-onto-here             = "!f(){ git rebase-branch-from-branch-to-branch $1 $(git branch-name) $(git branch-name) ; }; f"
	# TODO: take an opional HEAD replacement
	# TODO: this dumps the rebase help doc when it's done
	# TODO: give the old hash of the kicked out commit
	rebase-skip-hard                    = "!f(){ while git rebase --skip | grep \"CONFLICT\" >> /dev/null && echo \"rebase kicked one out\"; do true; done 2>&1 | egrep -v \"^fatal: No rebase in progress?\"; true; }; f"
	# TODO: Give the killsed hash so that it can be found if needed
	rebase-kickout                      = "!f(){ git rebase-standard --onto $1^ $1 $(git branch-name) ; git rebase-skip-hard; }; f"
	#TODO: works when run manual, but fails when called
	#rebase-here-onto-branch            = "!f(){ git rebase-branch-from-branch-to-branch $(git branch-name) $1 $1 ; }; f"
	#test-commits-count-command         = "" TODO git rebase --interactive --exec
	#test-commits-command-opt-count     = check back to last merge
	reorder-last-commits-count          = "!f(){ git stash-wrap rebase-standard --interactive HEAD~$1 ; }; f"
	reorder-last-commits-opt-count      = "!f(){ if [ $# -eq 0 ]; then git reorder-last-commits-count $(git rev-list --count master..HEAD); else git reorder-last-commits-count \"$1\"; fi; }; f"

	bisect-kick-from-test = "!f(){ OHEAD=`git branch-or-hash` ; git bisect-here-from-test \"$@\" && git checkout $OHEAD && git rebase-kickout refs/bisect/bad && git bisect reset ; }; f"

	bisect-kick-test                    = "!f(){ until $1; do bisect-kick-from-test $(git branch-start) $1; done; }; f"
	# TODO: In the case of trucncated history
	# =clone shallow= or =fetch deepeing shallow=
	# - one commit
	# - one year
	# - 1k more than already have
	# - until every line in a file has a non-merge gitblame
	# - until every line has a non-merge gitblame
	# - everything

	###############################
	# Head and Label Manipulation #
	###############################

	checkout-or-create = "!f(){ cd \"${GIT_PREFIX:-.}\" && { git checkout \"$@\" || git checkout -b \"$@\" ; } && git fetch-and-ff-pull ; }; f"

	reset-opt-file-or-commit = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git reset HEAD --hard; else git reset \"$@\"; fi }; f"
	reset-up-one             = "reset HEAD^ --no-refresh"
	reset-hard               = "!git r && git clean -d -f"

	#############################
	# Local Commit Manipulation #
	#############################

	add-verbose                    = "add -v"
	add-all                        = "add-verbose --all"
	add-interactive                = "add-verbose --patch"
	add-verbose-opt-list           = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git add-verbose --all ; else git add-verbose \"$@\"; fi }; f"
	add-interactive-opt-list       = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git add-interactive --all ; else git add-interactive \"$@\"; fi }; f"
	amend-with-staged              = "commit-standard --amend --reuse-message=HEAD"
	#amend-hash-with-staged         = "stash-unstaged-wrap _amend-hash-with-staged"
	# _amend-hash-with-staged =
	# keep branch name
	# stash
	# checkout hash
	# pop
	# add
	# amend-with-staged
	# rebase branch-name to here from hash
	# checkout branch-name

	#TODO: Fix this, probably with commit-tree
	#amend-with-staged-keep-date    = "!f(){ git amend-with-staged --date=\"`git show -s --format=%ci`\"; }; f"
	amend-with-staged-opt-message  = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git commit-standard --amend --reuse-message=HEAD; else git commit-standard --amend -m \"$@\"; fi }; f"
	add-to-last-commit             = "!f(){ cd \"${GIT_PREFIX:-.}\" && git add-verbose-opt-list \"$@\" && git amend-with-staged ; }; f"
	unstage-all                    = "reset -q"
	unstage                        = "reset --"

	commit-standard              = "commit"
	commit-with-optional-message = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -eq 0 ];then git commit-standard ; else git commit-standard -m \"$@\"; fi }; f"
	commit-branch-time           = "!f(){ git commit -m \"`git branch-name` `date`\"; }; f"

	small-add = "!printf 's\ns\ns\ny\nq' | git add-interactive"

	# TODO: Precheck that `auto build` exists
	build-eject-head = "!f(){ git auto DUMMY ; if ! git auto quick_build ; then git fold reset-up-one reset-hard ; fi; }; f"
	# TODO: this currently unstashes all of the changes after each build, which breaks how build systems check for changes.
	#small-build-commit-eject = "!f(){ git fold small-add commit-branch-time ; git stash-wrap build-eject-head ; }; f"
	small-pop-build-commit-eject = "fold pop add-all commit-branch-time build-eject-head"
	# TODO: unsafe until rep-ws works correctly
	rep-pop-build-commit-eject = "rep-ws small-pop-build-commit-eject"

	###########################
	# Local Code Manipulation #
	###########################

	list--ext = "!f(){ find | grep -E \"[.]$1$\" ; }; f"
	sed--ext-pat-replace = "!f(){ git list--ext \"$1\" | xargs -r -I {} -- sed -e \"s@$2@$3@g\" -i \"{}\"; }; f"
	sed--from-to = "!f(){ git grep -l \"$1\" | xargs -l -r sed -e \"s,$1,$2,g\" -i ; }; f"
	ised--from-to = "!f(){ echo \"$1\" | sed \"s/,.*//\" | xargs -l -r git grep -l | xargs -l -r sed -e \"s,$1,g\" -i ; }; f"
	sed--pat-rule = "!f(){ git grep -l  \"$1\" | xargs -l -r sed -e \"$2\" -i ; }; f"
	sed--pat-filter-rule = "!f(){ git grep -l  \"$1\" | grep -ivE \"$2\"  | xargs -l -r sed -e \"$3\" -i ; }; f"

	#########################
	# Not Head Manipulation #
	#########################

	#amend-staged-to-hash-verbose-unsafe = "git do-at-hash "$1" ammend-with-staged-keep-date; rebase all but hash onto new commit; move back to head; pop unstaged; git log-relivant HEAD hash"
	#amend-staged-to-hash-verbose        = "stash-unstaged-wrap amend-staged-to-hash-verbose-unsafe"

  #bisect-rebase test_name from_hash to_hash test_cmd
	# bisect a test between two commits
	# - when the failur is found
	#   - leave a tag so it can be refound
	#   - rebase all after on to the one before it
	#   - restart bisect-rebase on the new head

	# git rebase -i HEAD~5 ; change the last "pick" line to "edit"; do changes ; git rebase --continue
	# This will allow for updating a past commit with new content


	################
	# Stash Things #
	################

	stash-unstaged = "stash save --keep-index"
	stash-tracked = "stash"
	stash-staged = "stash --staged"
	stash-all     = "stash --include-untracked"
	#TODO: this won't work because stash-wrap will see the new stash
	#stash-ignored = "stash-wrap stash --all"
	stash-tracked-verbose = "!git unstage-all && git add-verbose-opt-list && git stash-tracked"
	stash-pop-and-stage = "!f(){ git stash pop; git add --all; }; f"
	stash-not-first-small = "fold small-add commit-branch-time stash-all reset-up-one"
	# TODO: This modifies all files, instead make a working tree copy?
	pop-first-small = "fold pop stash-not-first-small"
	stash-one-small = "fold small-add stash-staged"
	stash-all-as-small = "rep--while-diff stash-one-small"
	#stash-list-at-commit = "!f(){ git stash list -\"$1\" ; }; f"

	#
	##
	########################
	### Non-Standard Modes #
	########################
	##
	#

	##############
	# Submodules #
	##############

	#TODO: make a recurse macro for arbitary commands
	diff-submodule = "submodule foreach --recursive \"git d\""
	submodules-update = "!f(){ cd \"${GIT_PREFIX:-.}\" && git fetch-and-ff-pull ; git submodule sync ; git submodule update --init --recursive ; }; f"
	submodules-fix = "submodules-update"
	# I suspect the quoting isn't right on this
	#submodule-recurse = "!f(){ cd \"${GIT_PREFIX:-.}\" && git \"$@\" && git submodule foreach \"git submodule-recurse $@\" }; f"

	#######
	# SVN #
	#######

	svn-pull  = "svn rebase"
	svn-push  = "svn dcommit"
	svn-clone = "svn clone"

	##################
	# Glued Together #
	##################

	log-status-diff       = "!git log-branch -20 && echo && git status && echo && git paged diff-standard"
	log1-status-diff      = "!git log-current && echo && git status-color && echo && git paged diff-standard"

	add-and-amend-message = "!f(){ cd \"${GIT_PREFIX:-.}\" && if [ $# -gt 1 ];then git add-verbose \"${@:1:$(($#-1))}\"; fi ; git amend-with-staged-opt-message \"${@:$#:$#}\" ; }; f"
	add-and-commit        = "!f(){ cd \"${GIT_PREFIX:-.}\" && git add-verbose-opt-list \"${@:1:$(($#-1))}\"; git commit-standard -m \"${@:$#:$#}\" ; }; f"
	log-oops              = "paged log-lost --all"
	c-rand = "!git commit-standard -m \"$(echo 'wtc: ' $(curl http://whatthecommit.com/index.txt -s))\""
	i-rep-small-build-commit-eject = "fold stash-all-as-small rep-pop-build-commit-eject"
	# check if it builds before, should probably fail if it didn't rather than just ejecting
	rep-small-build-commit-eject = "fold build-eject-head i-rep-small-build-commit-eject"

	#
	##
	################
	### Shorthands #
	################
	##
	#

	a    = "add-verbose-opt-list"
	ac   = "add-and-commit"
	act  = "fold add-all commit-branch-time"
	ai   = "add-interactive-opt-list"
	aict = "fold add-interactive commit-branch-time"
	amd  = "add-and-amend-message"
	asm  = "amend-with-staged-opt-message"
	b    = "branch"
	bn   = "branch-name"
	chk  = "checkout-or-create"
	cm   = "commit-with-optional-message"
	cmbt = "commit-branch-time"
	d    = "paged diff-opt-commit"
	dstash = "paged diff-stashed"
	db   = "diff-changes-on-branch"
	drm  = "delete-opt-branch-opt-remote"
	f    = "fetch-and-ff-pull"
	frbo = "fold fetch-and-ff-pull rebase-origin"
	greb = "blame-grep--pat-opt-file"
	l    = "log-full"
	l1   = "log -1 --numstat --show-signature"
	l1sd = "log1-status-diff"
	lb   = "log-branch"
	ll   = "log-long-form"
	lr   = "log-recent"
	ls   = "list-files-opt-path"
	lsd  = "log-status-diff"
	lt   = "log-top-twenty"
	lts  = "fold log-top-twenty echo status"
	ltt  = "log-top-fourty"
	mn   = "merge --no-edit"
	p    = "push-opt-branch"
	pa   = "push-all"
	pop  = "stash pop"
	pov  = "project-over-view"
	r    = "reset-opt-file-or-commit"
	r1   = "reset-up-one"
	raict= "rep-wd fold add-interactive commit-branch-time"
	rbo  = "rebase-origin"
	rh   = "reset-hard"
	rsact= "rep-wd fold small-add commit-branch-time"
	s    = "stash-tracked-verbose"
	stat = "status"
