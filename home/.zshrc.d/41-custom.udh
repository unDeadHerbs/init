#! /usr/bin/env zsh
source ~/.zshrc.d/01-local

alias rot13="tr 'A-Za-z0-9' 'N-ZA-Mn-za-m'5-90-4"
alias sedesc="sed 's/[] ()'\''\\\\[&;]/\\\\&/g'"
alias escpath="sed 's/\\//\\\\&/g'"
alias sedquote="sed 's/^./\"&/'|sed 's/.$/&\"/'"
alias sedtack="sed 's/[-]/\\-/g'"
alias toascii="perl -ne 'chomp if eof;for(unpack(\"C*\")){print\"\$_ \"}print\"\\n\"if eof'"
alias spaceseperate="sed 's/./& /g'"
alias unspaceseperate="sed 's/\(.\) /\1/g'"
alias firstline="perl -pe '<>'"
alias xarg="xargs -L 1 -d '\n'"
[[ $(hostname) = 'uDH-x201' ]] && alias delta="~/ai/cpp/stream/delta"
exists espeak && alias toipa='espeak --stdin -q --ipa'
alias buffer="sed''|perl -ne '\$a[\$n++]=\$_;if(eof){for(@a){print}}'|sed''"
#TODO: alias reverse="perl -ne 'something fancy'"
exists httrack && alias htmirror="httrack -w '+*' -Y -q -r9999 -s0"
exists curl && weather(){
	# There is a lot more to wttr.in on their github
	c(){curl "$@"}
	if exists timeout >/dev/null; then
	    c(){timeout 2 curl "$@"}
	fi

	if [ "$1" = "--full" ] ; then
	    c -s wttr.in
	else
	    # Search for "igor_chubin" to remove warning on failure.
	    c -s wttr.in|head -n 7|grep -v "igor_chubin"
	fi
    }

exists curl && alias forcast='curl -s wttr.in|tail -n +8|head -n -2'
if exists sox
then
    alias cleenmic='sox -d -n trim 0 .1 noiseprof|sox -d -d noisered'
    alias trimsilence='sox - - silence -l 1 0.3 1% -1 2.0 1%'
fi
alias e.='e .'
quote(){ for s in $@; do echo -n $s|sedesc; echo -n " "; done; echo };

# Create aliases for programs that  need to be run as root
##TODO: have that check if in sudoers file
exists sudo || sudo(){
	su -c "cd `pwd`; `quote "$@"`" -
    }
exists emerge && alias emerge="sudo emerge"
exists eix-sync && alias eix-sync="sudo eix-sync -q"

exists ssh && ,(){
	TO=$1; shift
	TF=`mktemp`
	if [ $# -ne 0 ]; then
	    ssh -o "LogLevel INFO" -E $TF $TO -t `quote "$@"` 2>/dev/null
	    RET=$?
	else
	    ssh -o "LogLevel INFO" -E $TF $TO 2>/dev/null
	    RET=$?
	fi
	cat $TF >&2
	rm $TF
	return $RET
    }

u(){
    until "$@"
    do
	echo "Retrying"
	sleep 5
    done
}

U(){
		# TODO: have a start and max backoff value

		# TODO: Make a smarter version or mode of this.  If the program
		# ran for a while or changed error code then the backoff should
		# reset. E.g. if `U , w tmux` was connected for a while and then
		# the internet goes out, the backoff should reset on each
		# successful connection.  The error returned can't help with that
		# because they are both "no connection" (255) errors.
		delay=1
		until "$@"
		do
				echo "Retrying Backoff=$delay"
				sleep $delay
				delay=$((2*delay))
		done
}

better_neofetch(){
		{
				type hyfetch > /dev/null 2>&1 && hyfetch
		} || {
				type fastfetch > /dev/null 2>&1 && fastfetch
		} || {
				type neofetch > /dev/null 2>&1 && neofetch --color_blocks off
		} || {
				{ whoami ; echo on ; hostname } \
						| xargs \
						| {
						{
								type figlet > /dev/null 2>&1 && figlet -w1000
						} || {
								type toilet > /dev/null 2>&1 && toilet -w1000
						} || {
								/usr/bin/env cat
						}		
				}
				type uname > /dev/null 2>&1 && uname -a
		}
}

command_to_string(){
		which $1 | tr '\n\t' '; ' | sed 's/;/ ; /g' | sed 's/{ ;/{/g' | sed "s/$1 ()//" 
}

hosts_list(){
		# TODO: unique without buffering/sorting, the generation order is better
		# TODO: perform each ssh in parallel and then print the results without interleaving
		# TODO: check for duplicates, resolve to IP and then choose first of (config, avahi, ip)

		display_cmd=$(command_to_string better_neofetch)
		bash -c $display_cmd
		
		# first generate a list of possible hosts
		# second request from each of them
		{
				# List hosts in order of expecting them to exist
				# look at the local services
				exists avahi-browse && {
						avahi-browse -altr \
								| grep hostname \
								| sed 's/ *hostname = [[]\(.*\)[]]/\1/' \
								| sort -u; }
				# look though the ssh config files
				#[ -e $HOME/.ssh/config ] && {
				#		grep "^[Hh]ost" $HOME/.ssh/config \
				#				| sed 's,^[Hh]ost ,,' \
				#				| grep -v github \
				#				| grep -v "[*]"
				#}
				# ping scan local networks
				exists nmap && {
						ifconfig \
								| grep broadcast \
								| sed 's,.*broadcast \(.*\),\1,' \
								| grep -v '^172.30' \
								| sed 's,255,*,g' \
								| xargs -l nmap -p 22 --open \
								| grep 'Nmap scan report for' \
								| sed 's,Nmap scan report for ,,' \
								| grep -Ev "[.]0[.]1$"
				}
				# TODO: search the whole network blindly when ssh is in parallel
		} \
		| sort -u \
		| while read host; do
				{
						true | timeout 60 ssh -q "$host" -t "bash -c \"$display_cmd\"" ;
				} && echo "Found Host: $host\n" || echo "Failed Host: $host"
		done
}

function sleep_until {
    # sleep_until "7:00 tomorrow"
    seconds=$(( $(date -d "$*" +%s) - $(date +%s) )) # Use $* to eliminate need for quotes
    #echo "Sleeping for $seconds seconds"
    sleep $seconds
}

exists cowsay && exists fortune &&
    if exists lolcat; then
	cowfortune(){clear && fortune | cowsay -f $(find /usr/share/cowsay*|grep "[.]cow"| shuf -n1)  -W $(($COLUMNS-15))|lolcat}
    else
	cowfortune(){clear && fortune | cowsay -f $(find /usr/share/cowsay*|grep "[.]cow"| shuf -n1)  -W $(($COLUMNS-15))}
    fi

# Use lf to switch directories and bind it to ctrl-o

exists ranger && rcd () {
    tmp="$(mktemp)"
    ranger --choosedir="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

exists exa && l_test(){
	screen_rows=$(stty -a | grep -Po '(?<=rows )\d+')
	if (( $(ls|wc -l) < $screen_rows*3/4 )); then
	    #clear
	    exa --tree --long --git --level=1
	else
	    echo "more"
	fi	
    }

uname -r | grep "gentoo" &&
    package_from(){
	location=`realpath $(whence -p "$@")` 2> /dev/null
	if [ "$?" = "0" ]; then
	    if exists eix; then
		equery -q b $location | eix -'|*'
	    else
		equery b $location
	    fi
	else
	    if exists e-file; then
		if e-file "$@"|grep "No matches found." >/dev/null; then
		    which "$@"
		else
		    e-file "$@"
		fi
	    else
		which "$@"
	    fi
	fi
	# comm -12 <(equery d packagename|sort|sed 's/[-][0-9.]*\([-]r[0-9]\+\|\)$//') /var/lib/portage/world
    }

uname -a|grep "\(Ubuntu\|Debian\)" &&
    package_from(){
	location=`realpath $(whence -p "$@")` 2> /dev/null
	if [ "$?" = "0" ]; then
	    dpkg -s `dpkg -S $location|cut -d: -f1`|
		grep -E "^((Package|Version|Installed-Size|Homepage|Description): .*)$"
	else
	    if exists apt-file; then
		packages=`apt-file search -x "bin.*\b$@$"|cut -d: -f1|xargs`
		apt show $(echo $packages) 2>/dev/null |
		    grep -E "^((Package|Version|Installed-Size|Homepage|Description): .*)$" |
		    perl -pe 'chomp if eof'
	    else
		dpkg-query -S "$@"|grep "/$@$"
		# TODO: if a sudoer then ask to have apt-file installed
		# TODO: There's a better version of this somewhere in bash
	    fi
	    # APT(8) and PERL(1) are rather noisy with errors, so we
	    # silence them with NULL(4).
	    # TODO: This suppresses the apt-file update request.
	fi 2>/dev/null
    }


exists sox && alias noise_wash="play -n synth brownnoise synth pinknoise mix synth sine amod 0.3 10"
exists play && alias whitenoise="play -n synth whitenoise"

[ "$(hostname)" = "windmills" ] && {
		init_sync(){
				pushd ~/init
				git f
				git p
				popd
				ls -d ~/network/*/home/*/init | while read ppp; do pushd "$ppp"; g f; g p; popd ; done		
		}
		init_stat(){
				pushd ~/init
				git stat
				popd
				ls -d ~/network/*/home/*/init | while read ppp; do pushd "$ppp"; g stat; popd ; done		
		}
		
}
